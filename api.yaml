swagger: '2.0'
info:
  title: Inride API Documentation
  description: API documentation Inride. Authentications are handled with cookies set from the server.
  version: 1.0
  contact:
    email: successakinyemi365@gmail.com
  license:
    name: Apache 2.0
    url: 'http://apache.org/'
host: inride-server.onrender.com
basePath: /
schemes:
  - https

tags:
  - name: General
    description: General
  - name: Auth
    description: Endpoints for authentication
  - name: Passenger Auth
    description: Endpoints for passenger registration Authentication
  - name: Driver Auth
    description: Endpoints for driver registration Authentication
  - name: Passenger Socket.io Request
    description: Endpoints for passenger Socket.io Request endpoint is under the namespace of passenger
  - name: Driver Socket.io Request
    description: Endpoints for driver Socket.io Request endpoint is under the namespace of passenger
  - name: Passenger 
    description: Endpoints for passenger 
  - name: Driver 
    description: Endpoints for driver 
  - name: Booking 
    description: Endpoints for Booking 
  
paths:
#GENARAL
  /:
    get:
      tags:
        - General
      summary: Home GET request
      description: The first request to check server
      responses:
        200:
          description: Success

  /api/ride/afterRideFeedBack:
    post:
      tags:
        - General
      summary: Provide Ride feed backs either passenger or driver
      description: Provide a feed back about a ride
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
            properties:
              rideId:
                type: string
              comment: 
                type: string
              rating:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#AUTH

  /api/auth/verifyOtp:
    post:
      tags:
        - Auth
      summary: Verify OTP
      description: Verify OTP sent to user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        200:
          description: OTP Verified
        400:
          description: User error
        500:
          description: Server error

  /api/auth/signout:
    post:
      tags:
        - Auth
      summary: Signout a user
      description: This endpoint signout a user
      responses:
        200:
          description:  successful
        500:
          description: Server error

#PASSENGER AUTH

  /api/passenger/auth/registerNumber:
    post:
      tags:
        - Passenger Auth
      summary: Register Mobile Number of user
      description: This endpoint registers the mobile number of a new passenger user. Mobile number is required in international format (e.g., +2349012345678 an OTP will be sent via SMS).
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/resendOtp:
    post:
      tags:
        - Passenger Auth
      summary: Resend OTP to user Mobile Number
      description: This endpoint resends the otp to the user mobile number of a passenger user. Mobile number is required in international format (e.g., +2349012345678). OTP will be sent via SMS.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/verifyPersonalDetails:
    post:
      tags:
        - Passenger Auth
      summary: Verify email does not exist
      description: This endpoint verifies email does not exist and a valid mobile number.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - mobileNumber
            properties:
              email:
                type: string
              mobileNumber:
                type: string
      responses:
        201:
          description: Successful
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/verifySSN:
    post:
      tags:
        - Passenger Auth
      summary: Verify user ssn
      description: This endpoint verifies the ssn of a passenger user.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - ssn
            properties:
              ssn:
                type: string
      responses:
        201:
          description: Successful
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/resendOtp:
    post:
      tags:
        - Passenger Auth
      summary: Resend OTP to user Mobile Number
      description: This endpoint resends the otp to the user mobile number of a passenger user. Mobile number is required in international format (e.g., +2349012345678). OTP will be sent via SMS.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/registerUser:
    post:
      tags:
        - Passenger Auth
      summary: Register user account
      description: Completes registration for a passenger user account.
      consumes:
        - multipart/form-data
      parameters:
        - name: email
          in: formData
          required: true
          type: string
        - name: ssn
          in: formData
          required: false
          type: string
        - name: firstName
          in: formData
          required: true
          type: string
        - name: lastName
          in: formData
          required: true
          type: string
        - name: mobileNumber
          in: formData
          required: true
          type: string
        - name: idCardType
          in: formData
          required: true
          type: string
          enum:
            - driverLicense
            - internationalPassport
            - voterCard
        - name: idCardImgFront
          in: formData
          required: true
          type: file
        - name: idCardImgBack
          in: formData
          required: true
          type: file
        - name: profileImg
          in: formData
          required: true
          type: file
      responses:
        200:
          description: User data sent - successful
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/signin:
    post:
      tags:
        - Passenger Auth
      summary: Signin passeger
      description: This endpoint sigin in a user to their account after which an OTP is sent as an email to the mobile number after a successfull signin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification account OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/verifyLoginOtp:
    post:
      tags:
        - Passenger Auth
      summary: Verify Login Otp
      description: This endpoint verifies the otp sent to the user after the attempt to login. after a successful sigin cookies is been set and sent from the server to the client
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        201:
          description: userData - successful
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/auth/verifyToken:
    post:
      tags:
        - Passenger Auth
      summary: Verify passenger authentication
      description: This endpoint verifies wheather a passenger is still authenticated or not
      responses:
        200:
          description: userData - successful
        403:
          description: UnAuthenicated
        500:
          description: Server error

#DRIVER AUTH

  /api/driver/auth/registerWithPassengerAccount:
    post:
      tags:
        - Driver Auth
      summary: Register New Driver from Passenger account
      description: This endpoint registers a new  driver using their passenger acocunt. the mobile number of the passenger account is required.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: successful - otp sent
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/verifyPassengerToDriverAccountOtp:
    post:
      tags:
        - Driver Auth
      summary: Verify OTP sent to passenger mobile number
      description: This endpoint verifies the otp sent to the passenger mobile number after the attempt to register as a driver.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        201:
          description: Driver Account created - successful
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/completeDriverRegistration:
    post:
      tags:
        - Driver Auth
      summary: Complete Driver Registration
      description: Completes registration for a driver account. carDetails object values include - '{registrationNumber, year, model, color, noOfSeats, carImg}'. coordinates of the driver location is also required as an array [longitude, latitude] longitude first for GeoJSON
      consumes:
        - multipart/form-data
      parameters:
        - name: opreatingCity
          in: formData
          required: true
          type: string
        - name: ssn
          in: formData
          required: false
          type: string
        - name: mobileNumber
          in: formData
          required: false
          type: string
        - name: carDetails
          in: formData
          required: true
          type: object
          required:
            - registrationNumber
            - year
          properties:
            registrationNumber:
              type: string
            year:
              type: string
            model:
              type: string
            color:
              type: string
            noOfSeats:
              type: string
            carImg:
              type: string
        - name: pricePerKm
          in: formData
          required: true
          type: number
        - name: driverLincenseImgFront
          in: formData
          required: true
          type: file
        - name: driverLincenseImgBack
          in: formData
          required: true
          type: file
        - name: profileImg
          in: formData
          required: true
          type: file
        - name: coordinates
          in: formData
          required: true
          type: array
          required:
            - longitude
            - latitude
          properties:
            - longitude:
              type: number
            - latitude:
              type: number
      responses:
        201:
          description: Account created successfully
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/registerNewDriver:
    post:
      tags:
        - Driver Auth
      summary: Register Mobile Number of driver
      description: This endpoint registers the mobile number of a new driver user. Mobile number is required in international format (e.g., +2349012345678 an Otp will be sent via SMS).
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/resendOtp:
    post:
      tags:
        - Driver Auth
      summary: Resend OTP to driver Mobile Number
      description: This endpoint resends the otp to the driver mobile number. Mobile number is required in international format (e.g., +2349012345678). OTP will be sent via SMS.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/verifyPersonalDetails:
    post:
      tags:
        - Driver Auth
      summary: Verify if email does not exist and account is valid
      description: This endpoint verifies email does not exist and a valid mobile number.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - mobileNumber
            properties:
              email:
                type: string
              mobileNumber:
                type: string
      responses:
        201:
          description: Successful
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/verifySSN:
    post:
      tags:
        - Driver Auth
      summary: Verify driver ssn
      description: This endpoint verifies the ssn of a driver user.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - ssn
            properties:
              ssn:
                type: string
      responses:
        201:
          description: Successful
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/completeNewDriverRegistration:
    post:
      tags:
        - Driver Auth
      summary: Complete new Driver Registration
      description: Completes registration for a new driver account. carDetails object include- '{registrationNumber, year, model, color, noOfSeats, carImg}'. coordinates of the driver location is also required as an array [longitude, latitude] longitude first for GeoJSON
      consumes:
        - multipart/form-data
      parameters:
        - name: opreatingCity
          in: formData
          required: true
          type: string
        - name: carDetails
          in: formData
          required: true
          type: object
          properties:
            registrationNumber:
              type: string
            year:
              type: string
            model:
              type: string
            color:
              type: string
            noOfSeats:
              type: string
            carImg:
              type: string
        - name: pricePerKm
          in: formData
          required: true
          type: number
        - name: driverLincenseImgFront
          in: formData
          required: true
          type: file
        - name: driverLincenseImgBack
          in: formData
          required: true
          type: file
        - name: profileImg
          in: formData
          required: true
          type: file
        - name: mobileNumber
          in: formData
          required: true
          type: string
        - name: email
          in: formData
          required: true
          type: string
        - name: firstName
          in: formData
          required: true
          type: string
        - name: lastName
          in: formData
          required: true
          type: string
        - name: ssn
          in: formData
          required: false
          type: string
        - name: coordinates
          in: formData
          required: true
          type: array
          required:
            - longitude
            - latitude
          properties:
            - longitude:
              type: number
            - latitude:
              type: number
      responses:
        201:
          description: Account created successfully
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/signin:
    post:
      tags:
        - Driver Auth
      summary: Signin driver
      description: This endpoint sigin in a driver to their account after which an OTP is sent as an email to the mobile number after a successfull signin
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - mobileNumber
            properties:
              mobileNumber:
                type: string
      responses:
        201:
          description: Verification account OTP sent
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/verifyLoginOtp:
    post:
      tags:
        - Driver Auth
      summary: Verify Login Otp
      description: This endpoint verifies the otp sent to the driver after the attempt to login. after a successful sigin cookies is been set and sent from the server to the client
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        201:
          description: userData - successful
        400:
          description: User error
        500:
          description: Server error

  /api/driver/auth/verifyToken:
    post:
      tags:
        - Driver Auth
      summary: Verify driver authentication
      description: This endpoint verifies wheather a driver is still authenticated or not, e.g can be used in splash screen while loading
      responses:
        200:
          description: userData - successful
        403:
          description: UnAuthenicated
        500:
          description: Server error


#PASSENGER SOCKET.IO REQUEST

  /passenger/getNearByDrivers:
    post:
      tags:
        - Passenger Socket.io Request
      summary: get Location of drivers around a passenger - socket.io request -  socket.emit('getNearbyDrivers', data); socket.on('nearbyDrivers', serverResponse)
      description: This endpoint get the near by drivers around a passenger location. The passenger location is required as an array [longitude, latitude] longitude first for GeoJSON
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - type
              - coordinates
            properties:
              type:
                radius: number
              location:
                type: array
                required:
                  - longitude
                  - latitude
                properties:
                  - longitude:
                    type: number
                  - latitude:
                    type: number
      responses:
        201:
          description: Drivers locations
        400:
          description: User error
        500:
          description: Server error


#DRIVER SOCKET.IO REQUEST

  /driver/updateLocation:
    post:
      tags:
        - Driver Socket.io Request
      summary: Update the current driver location - socket.io request - socket.emit('updateLocation', locationData); socket.on('locationUpdated')
      description: This endpoint update the driver locations for passenger to see e.g can be send every 5 seconds for high accuracy. 
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - type
              - coordinates
            properties:
              type:
                type: string
                value: Point
              coordinates:
                type: array
                required:
                  - longitude
                  - latitude
                properties:
                  - longitude:
                    type: number
                  - latitude:
                    type: number
      responses:
        201:
          description: Location updated
        400:
          description: User error
        500:
          description: Server error

  /driver/goOnline:
    post:
      tags:
        - Driver Socket.io Request
      summary: Update driver online status - socket.io request - socket.emit('goOnline', data) socket.on('statusUpdated', serverResponse)
      description: This endpoint update the driver online status to true for passenger to see
      responses:
        201:
          description: Drive online
        400:
          description: User error
        500:
          description: Server error

  /driver/goOffline:
    post:
      tags:
        - Driver Socket.io Request
      summary: Update driver online status - socket.io request - socket.emit('goOffline', data) socket.on('statusUpdated', serverResponse)
      description: This endpoint update the driver online status to false for passenger
      responses:
        201:
          description: Drive offline
        400:
          description: User error
        500:
          description: Server error

#PASSENGER
  /api/ride/reportForgotItem:
    post:
      tags:
        - Passenger
      summary: Report a forgotten item from a ride
      description: Report items forgotten in a drivers car
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
              - description
            properties:
              rideId:
                type: string
              description: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error
          
  /passenger/shareRideWithFriends:
    post:
      tags:
        - Passenger
      summary: Share a ride with friends socket.io request under the passenger namespace socket.on('shareRideWithFriends', data) socket.emit('shareRideWithFriends', serverResponse)
      description: This endpoint allows users to share ride with friends on ridefuze. passing friends as array of mobile numbers and rideId
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
              - friends
            properties:
              rideId:
                type: string
              friends: 
                type: array
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /passenger/newRideShared:
    get:
      tags:
        - Passenger
      summary: Notify Friends that are online who ride has been shared with. socket.io under the passenger namespace socket.emit('newRideShared', serverResponse)
      description: This endpoint allows all users (passengers) who a ride has been shared with them
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error
          

#DRIVER

  /driver/car/newCar:
    post:
      tags:
        - Driver 
      summary: Add a new car by driver
      description: This endpoint add a new car for driver
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - registrationNumber
              - year
              - model
              - color
              - noOfSeats
              - carImg
            properties:
              registrationNumber:
                type: string
              year:
                type: string
              model: 
                type: string
              color: 
                type: string
              noOfSeats:
                type: number
              carImg:
                type: file
      responses:
        200:
          description: Car added successfully
        400:
          description: User error
        500:
          description: Server error

  /driver/car/updateCarDetails:
    post:
      tags:
        - Driver 
      summary: Update a car by driver
      description: This endpoint update a car for driver
      parameters:
        - name: body
          in: body
            properties:
              registrationNumber:
                type: string
              year:
                type: string
              model: 
                type: string
              color: 
                type: string
              noOfSeats:
                type: number
              carImg:
                type: file
      responses:
        200:
          description: Car updated successfully
        400:
          description: User error
        500:
          description: Server error

  /driver/car/activateCar:
    post:
      tags:
        - Driver 
      summary: Update the  driver active car
      description: This endpoint update the driver active car to be used for the day
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - _id
            properties:
              _id:
                type: string
      responses:
        200:
          description: Car activated successfully
        400:
          description: User error
        500:
          description: Server error
          
  /driver/car/getCarDetail:
    get:
      tags:
        - Driver 
      summary: Get a car information
      description: This endpoint get the driver car details . requires carId which is the _id as parameter
      parameters:
        - name: body
          in: params
          required: true
          schema:
            type: object
            required:
              - carId
            properties:
              carId:
                type: string
      responses:
        201:
          description: Succesful - car Detail infomation
        400:
          description: User error
        500:
          description: Server error

  /driver/car/getCarDetails:
    get:
      tags:
        - Driver 
      summary: Get cars information
      description: This endpoint get the driver cars details.
      responses:
        201:
          description: Succesful - Bank Details infomation
        400:
          description: User error
        500:
          description: Server error
           
  /driver/car/deleteCarDetails:
    post:
      tags:
        - Driver 
      summary: Delete a car account information
      description: This endpoint delete the driver car details. requires carId which is the _id
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - carId
            properties:
              carId:
                type: string
      responses:
        201:
          description: Car Details deleted
        400:
          description: User error
        500:
          description: Server error
                 
  /driver/homeBreak:
    post:
      tags:
        - Driver 
      summary: Update the driver the home break screen
      description: This endpoint update the driver information in the home break screen from auto accept rides to ride type and km range
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              autoAcceptRides:
                type: string
              rideType:
                type: string
              kmRange:
                type: string
      responses:
        200:
          description: Driver account updated
        400:
          description: User error
        500:
          description: Server error

  /driver/bank/newBankDetails:
    post:
      tags:
        - Driver 
      summary: New Bank Details for driver
      description: This endpoint update the driver bank details for payment
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - accountName
              - accountNumber
              - bankName
            properties:
              accountName:
                type: string
              accountNumber:
                type: string
              bankName:
                type: string
      responses:
        201:
          description: Bank Details updated
        400:
          description: User error
        500:
          description: Server error

  /driver/bank/updateBankDetails:
    post:
      tags:
        - Driver 
      summary: Update a bank account information
      description: This endpoint update the driver bank details for payment. requires bankId which is the _id
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - bankId
              - accountName
              - accountNumber
              - bankName
            properties:
              bankId:
                type: string
              accountName:
                type: string
              accountNumber:
                type: string
              bankName:
                type: string
      responses:
        201:
          description: Bank Details updated
        400:
          description: User error
        500:
          description: Server error

  /driver/bank/deleteBankDetails:
    post:
      tags:
        - Driver 
      summary: Delete a bank account information
      description: This endpoint delete the driver bank details for payment. requires bankId which is the _id
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - bankId
            properties:
              bankId:
                type: string
      responses:
        201:
          description: Bank Details deleted
        400:
          description: User error
        500:
          description: Server error

  /driver/bank/getBankDetail:
    get:
      tags:
        - Driver 
      summary: Get a bank account information
      description: This endpoint get the driver bank details for payment. requires bankId which is the _id as parameter
      parameters:
        - name: body
          in: params
          required: true
          schema:
            type: object
            required:
              - bankId
            properties:
              bankId:
                type: string
      responses:
        201:
          description: Succesful - Bank Detail infomation
        400:
          description: User error
        500:
          description: Server error

  /driver/bank/getBankDetails:
    get:
      tags:
        - Driver 
      summary: Get bank accounts information
      description: This endpoint get the driver bank details for payment.
      responses:
        201:
          description: Succesful - Bank Details infomation
        400:
          description: User error
        500:
          description: Server error

  /rides/getDriverRides:
    get:
      tags:
        - Driver 
      summary: Get Driver Rides
      description: This endpoint get a driver rides. possible queries are - limit, page for pagination, startDate, endDate to get data based on date range, rideType to get data based on ride type
      parameters:
        - name: body
          in: query
          schema:
            type: string
            required:
              - limit
              - page
            properties:
              limit:
                type: string
              page: 
                type: string
              startDate:
                type: string
              endDate: 
                type: string
              rideType: 
                type: string
      responses:
        201:
          description: Succesful - ride details infomation
        400:
          description: User error
        500:
          description: Server error

  /rides/getLastSevenDays:
    get:
      tags:
        - Driver 
      summary: Get Driver Rides last seven days
      description: This endpoint get a driver past seven days rides. possible queries are - limit, page for pagination,
      parameters:
        - name: body
          in: query
          schema:
            type: string
            required:
              - limit
              - page
            properties:
              limit:
                type: string
              page: 
                type: string
      responses:
        201:
          description: Succesful - ride details infomation
        400:
          description: User error
        500:
          description: Server error

  /driver/payout/newPayout:
    post:
      tags:
        - Driver 
      summary: Driver Request Payout
      description: This endpoint request for payout from a earnings
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - bankId
              - amount
            properties:
              bankId:
                type: string
              amount:
                type: string
      responses:
        201:
          description: payout request success
        400:
          description: User error
        500:
          description: Server error

  /driver/payout/getPayouts:
    get:
      tags:
        - Driver 
      summary: Get Driver Payouts histroy
      description: This endpoint get a driver payout request hsitroy. queries are - limit, page for pagination,
      parameters:
        - name: body
          in: query
          schema:
            type: string
            required:
              - limit
              - page
            properties:
              limit:
                type: string
              page: 
                type: string
      responses:
        201:
          description: Succesful - payout details infomation
        400:
          description: User error
        500:
          description: Server error

  /driver/profile/updateProfile:
    post:
      tags:
        - Driver 
      summary: Update driver account info
      description: This endpoint update the driver account info, accountImg as file
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
            properties:
              language:
                type: string
              pushNotification:
                type: string
              mailNotification:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              homeAddress:
                type: string
              workAddress:
                type: string
              accountImg:
                type: file
      responses:
        201:
          description: Profile updated succesful
        400:
          description: User error
        500:
          description: Server error

#BOOKING
  /passenger/requestRide:
    post:
      tags:
        - Booking 
      summary: Create a new ride booking from user under the namespace passenger
      description: This endpoint creates a new booking for a passenger uses socket.io for communications. socket.emit('requestRide', bookingData); socket.on('rideRequested', serverResponse). values of rideType include - [ 'personal', 'group', 'split', 'delivery', 'reservation']
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - from
              - fromId
              - fromCoordinates
              - to
              - pickupPoint
              - rideType
            properties:
              from:
                type: string
              fromId:
                type: string
              fromCoordinates:
                type: object
                required:
                  - type
                  - coordinates
                properties:
                  type:
                    type: string
                    value: Point
                  coordinates:
                    type: array
                    required:
                      - longitude
                      - latitude
                    properties:
                      - longitude:
                        type: number
                      - latitude:
                        type: number
              to:
                type: array
                items:
                  type: object
                  required:
                    - place
                    - placeId
                    - locationCoordinates
                  properties:
                    place:
                      type: string
                    placeId:
                      type: string
                    locationCoordinates:
                      type: object
                      required:
                        - type
                        - coordinates
                      properties:
                        type:
                          type: string
                          enum:
                            - Point
                        coordinates:
                          type: array
                          items:
                            type: number
                          minItems: 2
                          maxItems: 2
              rideType:
                type: string
              pickupPoint:
                type: string
              personnalRide:
                type: boolean
      responses:
        201:
          description: Booking created successfully - drivers close to starting location have be alerted
        400:
          description: User error
        500:
          description: Server error

  /drivers/newRideRequest:
    get:
      tags:
        - Booking
      summary: Alert drivers around the ride pickup location about a new ride. socket.emit(newRideRequest) to drivers namespace
      description: This emit endpoint alert drivers around a pickup location on a new ride. alert to connected drivers
      responses:
        201:
          description: Drivers locations
        400:
          description: User error
        500:
          description: Server error

  /driver/acceptRideRquest:
    post:
      tags:
        - Booking
      summary: Socket connection to accept a new ride by driver socket.on(acceptRideRquest, data) socket.emit(acceptRideRquest, data) under the driver namespaces
      description: This endpoint/socket connection allows a driver to accept a new ride request passing their price and rideId as data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - price
              - rideId
            properties:
              price:
                type: string
              rideId:
                type: string
      responses:
        201:
          description: success - true
        400:
          description: User error. success - false
        500:
          description: Server error

  /driver/cancelRideRequest:
    post:
      tags:
        - Booking
      summary: Socket connection to reject a new ride by driver socket.on(cancelRideRequest, data) socket.emit(cancelRideRequest, data) under the driver namespaces
      description: This endpoint/socket connection allows a driver to reject a new ride request passing rideId as data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
            properties:
              rideId:
                type: string
      responses:
        201:
          description: success - true
        400:
          description: User error. success - false
        500:
          description: Server error

  /passenger/availableDriversForRide:
    post:
      tags:
        - Booking
      summary: availableDriversForRide - socket.emit('availableDriversForRide', {success - true, message, finalResult }) on the passenger namespace
      description: This emit endpoint Return thr three drivers with the lowest price to the user after a 90sec wait for drivers to respond to ride request
      responses:
        201:
          description: Successful
        400:
          description: User error
        500:
          description: Server error

  /passenger/requestDriver:
    post:
      tags:
        - Booking
      summary: Socket connection to request for adriver after seeing their prices and details quest, socket.emit('requestDriver', data) socket.emit(requestDriver, data) under the passengerId namespaces
      description: This endpoint/socket connection allows a driver to accept a new ride request passing the driverId and rideId as data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - driverId
              - rideId
            properties:
              driverId:
                type: string
              rideId:
                type: string
      responses:
        201:
          description: success - true
        400:
          description: User error. success - false
        500:
          description: Server error

  /passenger/editRide:
    post:
      tags:
        - Booking 
      summary: Edit a ride booking from passenger who has booked a ride under the namespace passenger
      description: This endpoint creates a new booking for a passenger uses socket.io for communications. socket.emit('editRide', data); socket.on('editRide', serverResponse).
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
              - to
            properties:
              to:
                type: array
                items:
                  type: object
                  required:
                    - place
                    - placeId
                    - locationCoordinates
                  properties:
                    place:
                      type: string
                    placeId:
                      type: string
                    locationCoordinates:
                      type: object
                      required:
                        - type
                        - coordinates
                      properties:
                        type:
                          type: string
                          enum:
                            - Point
                        coordinates:
                          type: array
                          items:
                            type: number
                          minItems: 2
                          maxItems: 2
              rideId:
                type: string
      responses:
        201:
          description: Ride Edited successfully - awiting driver response
        400:
          description: User error
        500:
          description: Server error

  /drivers/newEditRideRequest:
    get:
      tags:
        - Booking
      summary: Alert driver that his passenger has edited the ride by adding more destination. socket.emit(newEditRideRequest) to drivers namespace
      description: This emit endpoint alert driver on update made on the ride.
      responses:
        201:
          description: success
        400:
          description: User error
        500:
          description: Server error

  /driver/acceptEditRideRquest:
    post:
      tags:
        - Booking
      summary: Socket connection for driver to accept a ride edit request by passenger socket.on(acceptEditRideRquest, data) socket.emit(acceptEditRideRquest, data) under the driver namespaces
      description: This endpoint/socket connection allows a driver to accept a edit ride request passing their price and rideId as data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - price
              - rideId
            properties:
              price:
                type: string
              rideId:
                type: string
      responses:
        201:
          description: success - true
        400:
          description: User error. success - false
        500:
          description: Server error

  /passenger/editRideRequestAccepted:
    get:
      tags:
        - Booking
      summary: Alert passenger that his driver has accepted or rejected the ride request and can then proceed to complete payment if accepted. socket.emit(editRideRequestAccepted) to passenger namespace
      description: This emit endpoint alert the passenger that the driver has accepted or rejected the edit ride request.
      responses:
        201:
          description: success with price deatils | false
        400:
          description: User error
        500:
          description: Server error

  /driver/rejectEditRideRquest:
    post:
      tags:
        - Booking
      summary: Socket connection for driver to reject a ride edit request by passenger socket.on(rejectEditRideRquest, data) socket.emit(rejectEditRideRquest, data) under the driver namespaces
      description: This endpoint/socket connection allows a driver to reject a edit ride request passing their price and rideId as data
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - rideId
            properties:
              rideId:
                type: string
      responses:
        201:
          description: success - true
        400:
          description: User error. success - false
        500:
          description: Server error
