swagger: '2.0'
info:
  title: Inride API Documentation
  description: API documentation Inride. Authentications are handled with cookies set from the server.
  version: 1.0
  contact:
    email: successakinyemi365@gmail.com
  license:
    name: Apache 2.0
    url: 'http://apache.org/'
host: inride-server.onrender.com
basePath: /
schemes:
  - https

securityDefinitions:
  CookieAuth:
    type: apiKey
    in: cookie
    name: inrideauthid

security:
  - CookieAuth: []

tags:
  - name: General
    description: General
  - name: Auth
    description: Endpoints for authentication
  - name: Stats
    description: Endpoints for statistics data
  - name: Transactions / Rides
    description: Endpoints for ride and transactions data
  - name: Passenger
    description: Endpoints for pasengers
  - name: Driver
    description: Endpoints for driver
  - name: Car
    description: Endpoints for car
  - name: Ride chat
    description: Endpoints for ride chats
  - name: Staff
    description: Endpoints for staff
  - name: Big taxes
    description: Endpoints for big taxes
  - name: CMS
    description: Endpoints for cms
  - name: Payout
    description: Endpoints for payout
  - name: Settings
    description: Endpoints for settings


paths:
#GENERAL
  /:
    get:
      tags:
        - General
      summary: Home GET request
      description: The first request to check server
      responses:
        200:
          description: Success

#AUTH
  /api/admin/auth/createAccount:
    post:
      tags:
        - Auth
      summary: Register new user   
      description: Endpoint to register user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - firstName
              - lastName
              - email
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
      responses:
        200:
          description: Success - OTP sent to registered email address
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/resendOtp:
    post:
      tags:
        - Auth
      summary: Resend Verification OTP 
      description: Endpoint to resend verifcation OTP
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        200:
          description: Success - OTP resent to registered email address
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/verifyOtp:
    post:
      tags:
        - Auth
      summary: Verify OTP code 
      description: Endpoint to verify OTP code
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/createPassword:
    post:
      tags:
        - Auth
      summary: Create account password 
      description: Endpoint to create account password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - confirmPassword
            properties:
              password:
                type: string
              confirmPassword:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/login:
    post:
      tags:
        - Auth
      summary: Login to account
      description: Endpoint to login to account. Login attempst is 3 times after wnhich the account would be block for 6hrs
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - email
            properties:
              password:
                type: string
              email:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/forgotPassword:
    post:
      tags:
        - Auth
      summary: Forgot password
      description: Endpoint to enable user provide email for forgot password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/resetPassword/{resetToken}:
    post:
      tags:
        - Auth
      summary: Reset password
      description: Endpoint to enable user reset their new password after providing the resetToken, password, confirmPassword
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - confirmPassword
            properties:
              password:
                type: string
              confirmPassword:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/auth/verifyToken:
    get:
      tags:
        - Auth
      summary: Verify if user auth is still valid
      description: Endpoint to is user auth is still valid
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /api/admin/auth/signout:
    post:
      tags:
        - Auth
      summary: Signout of Account
      description: Endpoint to enable user signout of account
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#STATS
  /api/stats/activeUsers/{stats}:
    get:
      tags:
        - Stats
      summary: Get Stats of active users
      description: The endpoint provides stats on active users based on the given criteria.
      parameters:
        - name: stats
          in: path
          required: false
          description: The type of stats to fetch (e.g., today, 7days, 30days, 1year, alltime). 30days by default
          schema:
            type: string
        - name: accountType
          in: query
          required: false
          description: Filter results by account type (e.g., passenger, driver) or leave blank to get all
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/stats/getTopLocations:
    get:
      tags:
        - Stats
      summary: Get top travel destination 
      description: The get the top 5 travel destination
      responses:
        200:
          description: Success

#TRANSACTION / RIDES
  /api/rides/getRides:
    get:
      tags:
        - Transactions / Rides
      summary: Get All rides
      description: The endpoint provides all ride data based on the given criteria.
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: status of ride/transaction 'Complete' to get only completed rides
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rides/getARide/{rideId}:
    get:
      tags:
        - Transactions / Rides
      summary: Get Info on a specific ride
      description: The endpoint provides data on a specific ride
      parameters:
        - name: rideId
          in: path
          required: true
          description: The rideId of the ride
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rides/passengerRides/{passengerId}:
    get:
      tags:
        - Transactions / Rides
      summary: Get all rides of a passenger
      description: The endpoint provides data on all ride of a passenger
      parameters:
        - name: passengerId
          in: path
          required: true
          description: The passengerId to get all rides of
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: rideType
          in: query
          required: false
          description: type of ride [ 'personal', 'group', 'delivery', 'schedule']
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error
        
  /api/rides/driverRides/{driverId}:
    get:
      tags:
        - Transactions / Rides
      summary: Get all rides of a driver
      description: The endpoint provides data on all ride of a driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The driverId to get all rides of
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: rideType
          in: query
          required: false
          description: type of ride [ 'personal', 'group', 'delivery', 'schedule']
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rides/getRideStats/{stats}:
    get:
      tags:
        - Stats
      summary: Get Stats of ride and transactions
      description: The endpoint provides stats on rides and transactions
      parameters:
        - name: stats
          in: path
          required: false
          description: The type of stats to fetch (e.g., today, 7days, 30days, 1year, alltime). 30days by default
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rides/getTransactions:
    get:
      tags:
        - Transactions / Rides
      summary: Get transaction data
      description: The endpoint provides transaction data based on the given criteria.
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: status of transaction (Pending, Successful, Failed). leave blank to get all
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#PASSENGERS
  /api/passenger/profile/getPassengers:
    get:
      tags:
        - Passenger
      summary: Get passengers
      description: The endpoint get all passengers passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: status of the passengers. possible status are - 'active', 'inactive', 'pending', 'deactivated', 'all'
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/passenger/profile/getAPassenger/{passengerId}:
    get:
      tags:
        - Passenger
      summary: Get Info on a specific passenger
      description: The endpoint provides data on a specific passenger
      parameters:
        - name: passengerId
          in: path
          required: true
          description: The passengerId of the passenger
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/passenger/profile/blockPassenger:
    post:
      tags:
        - Passenger
      summary: Block Passenger account
      description: Endpoint to block passenger account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - passengerId
            properties:
              passengerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/passenger/profile/unBlockPassenger:
    post:
      tags:
        - Passenger
      summary: UnBlock Passenger account
      description: Endpoint to unblock passenger account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - passengerId
            properties:
              passengerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error
        
#DRIVER
  /api/driver/profile/getDrivers:
    get:
      tags:
        - Driver
      summary: Get drivers
      description: The endpoint get all drivers passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: status of the driver. possible status are - 'active', 'inactive', 'pending', 'deactivated', 'all'
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/profile/getADriver/{driverId}:
    get:
      tags:
        - Driver
      summary: Get Info on a specific driver
      description: The endpoint provides data on a specific driver
      parameters:
        - name: driverId
          in: path
          required: true
          description: The driverId of the driver
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/profile/blockPassenger:
    post:
      tags:
        - Driver
      summary: Block driver account
      description: Endpoint to block driver account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - driverId
            properties:
              driverId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/driver/profile/unBlockPassenger:
    post:
      tags:
        - Driver
      summary: UnBlock driver account
      description: Endpoint to unblock driver account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - driverId
            properties:
              driverId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#CAR
  /api/driver/car/getAllCar:
    get:
      tags:
        - Car
      summary: Get cars
      description: The endpoint get all drivers cars. Passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: active
          in: query
          required: false
          description: to get all active or inactive cars. active value is either true or false
          schema:
            type: string
        - name: approved
          in: query
          required: false
          description: to get all approved or blocked cars by admin. approved value is either true or false
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/car/getACarDetail/{carId}/{driverId}:
    get:
      tags:
        - Car
      summary: Get Info on a specific driver car
      description: The endpoint provides data on a specific driver car
      parameters:
        - name: driverId
          in: path
          required: true
          description: The driverId of the driver
          schema:
            type: string
        - name: carId
          in: path
          required: true
          description: The carId (_id) of the car
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/car/getDriverCarDetails/{driverId}:
    get:
      tags:
        - Car
      summary: Get a driver cars
      description: The endpoint provides data on a driver car
      parameters:
        - name: driverId
          in: path
          required: true
          description: The driverId of the driver
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/car/blockCar:
    post:
      tags:
        - Car
      summary: Block a driver car
      description: Endpoint to block a driver car
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - driverId
              - carId
            properties:
              driverId:
                type: string
              carId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/driver/car/unBlockCar:
    post:
      tags:
        - Car
      summary: UnBlock a driver car
      description: Endpoint to unblock a driver car
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - driverId
              - carId
            properties:
              driverId:
                type: string
              carId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/driver/car/carStats/{stats}:
    get:
      tags:
        - Stats
      summary: Get Stats of cars
      description: The endpoint provides stats cars.
      parameters:
        - name: stats
          in: path
          required: false
          description: The type of stats to fetch (e.g., today, 7days, 30days, 1year, alltime). 30days by default
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#RIDE CHATS
  /api/rideChat/getChats:
    get:
      tags:
        - Ride chat
      summary: Get chats
      description: The endpoint get all chats messages. Passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: to get all chats based on status ('Active', 'Complete', 'in progress', 'Canceled')
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rideChat/getAchat/{rideId}:
    get:
      tags:
        - Ride chat
      summary: Get a specific ride chat details
      description: The endpoint provides details on a ride chat messages.
      parameters:
        - name: rideId
          in: path
          required: false
          description: The rideId 
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/rideChat/sendChatWarning:
    post:
      tags:
        - Ride chat
      summary: send warning to either party (passenger/driver) of a chat
      description: Endpoint to send warning to either passenger or driver of a chat. accountType options, accountType =('Passenger', 'Driver')
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - accountId
              - reason
              - accountType
            properties:
              accountId:
                type: string
              reason:
                type: string
              accountType:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#STAFFS
  /api/admin/staff/getProfile:
    get:
      tags:
        - Staff
      summary: Get staff profile
      description: Endpoint to get staff profile
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /api/admin/staff/getAStaff/{adminId}:
    get:
      tags:
        - Staff
      summary: Get a specific staff
      description: The endpoint provides details on a staff
      parameters:
        - name: adminId
          in: path
          required: true
          description: The adminId of te staff
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/admin/staff/updateProfile:
    post:
      tags:
        - Staff
      summary: Staff update profile
      description: Endpoint for staff to update account.
      consumes:
        - multipart/form-data
      parameters:
        - name: firstName
          in: formData
          required: false
          type: string
        - name: lastName
          in: formData
          required: false
          type: string
        - name: bio
          in: formData
          required: false
          type: string
        - name: country
          in: formData
          required: false
          type: string
        - name: timezone
          in: formData
          required: false
          type: string
        - name: profileImg
          in: formData
          required: false
          type: file
      responses:
        200:
          description: success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/staff/updatePassword:
    post:
      tags:
        - Staff
      summary: Update account password 
      description: Endpoint to update account password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - confirmPassword
              - oldPassword
            properties:
              password:
                type: string
              confirmPassword:
                type: string
              oldPassword:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/staff/getAllStaffs:
    get:
      tags:
        - Staff
      summary: Get All Staffs
      description: The endpoint get all staffs passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: status of the staffs. possible status are - 'active', 'inactive', 'pending', 'sacked', 'blocked' 'all'. blank would get all
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/admin/staff/activateStaff:
    post:
      tags:
        - Staff
      summary: Activate staff account
      description: Endpoint to activate staff account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - adminId
            properties:
              adminId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/staff/sackStaff:
    post:
      tags:
        - Staff
      summary: Sack staff account
      description: Endpoint to sack staff account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - adminId
            properties:
              adminId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/staff/deactivateStaff:
    post:
      tags:
        - Staff
      summary: deactivate staff account
      description: Endpoint to dectivate staff account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - adminId
            properties:
              adminId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/admin/staff/updateStaffAccount:
    post:
      tags:
        - Staff
      summary: Update staff Account
      description: Endpoint to update staff account, role, role description, permissions. allowed Permissions = ['driver', 'car', 'transaction', 'message', 'bigtaxe', 'cms', 'staff']
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - adminId
              - role
              - roleDescription
              - permissions
            properties:
              adminId:
                type: string
              role:
                type: string
              roleDescription:
                type: string
              permissions:
                type: array
                items: 
                  type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#BIG TAXES
  /api/bigTaxes/newBigTaxes:
    post:
      tags:
        - Big taxes
      summary: Create new big taxes
      description: Endpoint to create new big taxes
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - stationName
              - price
              - from
              - to
              - miles
              - time
            properties:
              stationName:
                type: string
              price:
                type: number
              from:
                type: string
              fromDescription:
                type: string
              to: 
                type: string
              toDescription:
                type: string
              miles:
                type: number
              time:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/bigTaxes/updateBigTaxes:
    post:
      tags:
        - Big taxes
      summary: update a big taxes
      description: Endpoint to update a big taxes data passing taxId - _id
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              taxId:
                type: string
              stationName:
                type: string
              price:
                type: number
              from:
                type: string
              fromDescription:
                type: string
              to: 
                type: string
              toDescription:
                type: string
              miles:
                type: number
              time:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/bigTaxes/deleteBigTaxes:
    post:
      tags:
        - Big taxes
      summary: Delete a big taxes
      description: Endpoint to delete big taxes
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - taxId
            properties:
              taxId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/bigTaxes/getAllBigTaxes:
    get:
      tags:
        - Big taxes
      summary: Get all big taxes
      description: The endpoint get all big taxes passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/bigTaxes/getABigTax/{taxId}:
    get:
      tags:
        - Big taxes
      summary: Get a specific big taxes
      description: The endpoint provides details on a big taxes
      parameters:
        - name: taxId
          in: path
          required: true
          description: The taxId of the big taxes
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#CMS
  /api/cms/newCms:
    post:
      tags:
        - CMS
      summary: Create new CMS
      description: Endpoint to create new cms data
      consumes:
        - multipart/form-data
      parameters:
        - name: title
          in: formData
          required: true
          type: string
        - name: message
          in: formData
          required: true
          type: string
        - name: url
          in: formData
          required: false
          type: string
        - name: caption
          in: formData
          required: false
          type: string
        - name: redirection
          in: formData
          required: true
          description: redirection for cms allowed values - ['inapp', 'mail', 'pushnotification', 'inappandpushnotification']
          type: string
        - name: status
          in: formData
          required: true
          description: status for cms allowed values - ['draft', 'scheduled', 'published']
          type: string
        - name: type
          in: formData
          required: true
          description: type for cms allowed values - ['updates', 'offers']
          type: string
        - name: accountType
          in: formData
          required: false
          description: (optional) account type if cms is for specify account type allowed values - ['driver', 'passenger', 'admin']
          type: string
        - name: users
          in: formData
          required: false
          description: custom users for custom users array passing email address
          type: array
          items:
            type: string
        - name: scheduled
          in: formData
          required: true
          description: scheduled value true is cms is a scheduled cms and false if not
          type: boolean
        - name: scheduledDate
          in: formData
          required: false
          description: An object that contains the day, time, and date value for scheduled cms required if cms is scheduled. { day, time, date}. for day - day of the week in full allowed values - ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]. for time - time the day in which the cms should send E.G "09:15 AM" or "12:00 PM" for date - date for the cms format YYYY-MM-DD
          type: object
          required:
            - day
          properties:
            day:
              type: string
              description: day of the week in full allowed values - ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].
            time:
              type: string
              description: time the day in which the cms should send E.G "09:15 AM" or "12:00 PM"
            date:
              type: string
              description: date for the cms format YYYY-MM-DD
        - name: cmsImage
          in: formData
          required: false
          type: file
      responses:
        200:
          description: success
        400:
          description: User error
        500:
          description: Server error

  /api/cms/updateCms:
    post:
      tags:
        - CMS
      summary: Create new CMS
      description: Endpoint to create new cms data
      consumes:
        - multipart/form-data
      parameters:
        - name: _id
          in: formData
          required: true
          description: id of the cms to update
          type: string
        - name: title
          in: formData
          required: false
          type: string
        - name: message
          in: formData
          required: false
          type: string
        - name: url
          in: formData
          required: false
          type: string
        - name: caption
          in: formData
          required: false
          type: string
        - name: redirection
          in: formData
          required: false
          description: redirection for cms allowed values - ['inapp', 'mail', 'pushnotification', 'inappandpushnotification']
          type: string
        - name: status
          in: formData
          required: false
          description: status for cms allowed values - ['draft', 'scheduled', 'published']
          type: string
        - name: type
          in: formData
          required: false
          description: type for cms allowed values - ['updates', 'offers']
          type: string
        - name: accountType
          in: formData
          required: false
          description: (optional) account type if cms is for specify account type allowed values - ['driver', 'passenger', 'admin']
          type: string
        - name: users
          in: formData
          required: false
          description: custom users for custom users array passing email address
          type: array
          items:
            type: string
        - name: scheduled
          in: formData
          required: false
          description: scheduled value true is cms is a scheduled cms and false if not
          type: boolean
        - name: scheduledDate
          in: formData
          required: false
          description: An object that contains the day, time, and date value for scheduled cms required if cms is scheduled. { day, time, date}. for day - day of the week in full allowed values - ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]. for time - time the day in which the cms should send E.G "09:15 AM" or "12:00 PM" for date - date for the cms format YYYY-MM-DD
          type: object
          required:
            - day
          properties:
            day:
              type: string
              description: day of the week in full allowed values - ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].
            time:
              type: string
              description: time the day in which the cms should send E.G "09:15 AM" or "12:00 PM"
            date:
              type: string
              description: date for the cms format YYYY-MM-DD
        - name: cmsImage
          in: formData
          required: false
          type: file
      responses:
        200:
          description: success
        400:
          description: User error
        500:
          description: Server error

  /api/cms/deleteCms:
    post:
      tags:
        - CMS
      summary: Delete a cms data
      description: Endpoint to delete cms
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - cmsId
            properties:
              cmsId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/cms/getAllCms:
    get:
      tags:
        - CMS
      summary: Get all cms
      description: The endpoint get all cms data passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: the status of the cms - ['draft', 'scheduled', 'published']
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/cms/getACms/{cmsId}:
    get:
      tags:
        - CMS
      summary: Get a specific cms
      description: The endpoint provides details on a specific cms
      parameters:
        - name: cmsId
          in: path
          required: true
          description: The cmsId of the cms data
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#PAYOUT
  /api/driver/payout/getAllPayouts:
    get:
      tags:
        - Payout
      summary: Get all payout request
      description: The endpoint get all payout request passing in possible queries
      parameters:
        - name: limit
          in: query
          required: true
          description: The limits of data sent on each request
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: the page number
          schema:
            type: string
        - name: status
          in: query
          required: true
          description: the status of the payout request - ['pending', 'succesful', 'canceled']
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/payout/getAPayout/{payoutId}:
    get:
      tags:
        - Payout
      summary: Get a specific payout
      description: The endpoint provides details on a specific payout request
      parameters:
        - name: payoutId
          in: path
          required: true
          description: The payoutId of the payout data
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/driver/payout/approvePayout:
    post:
      tags:
        - Payout
      summary: Approve a payout request
      description: Endpoint to approved a payout request
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - payoutId
            properties:
              payoutId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/driver/payout/rejectPayout:
    post:
      tags:
        - Payout
      summary: Reject a payout request
      description: Endpoint to reject a payout request
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - payoutId
            properties:
              payoutId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#SETTINGS
  /api/appSettings/updateAppSettings:
    post:
      tags:
        - Settings
      summary: Handle app settings
      description: Endpoint to handle and update app settings
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
            properties:
              name:
                type: string
                description: Name of the app
              pricePerKm:
                type: number
                description: the price per km set by admin
              deliveryPricePerKm:
                type: number
                description: the price per km for delivery rides
              earningCommission:
                type: number
                description: the earning coming of the app on every ride
              cancelationRidePercent:
                type: number
                description: the Cancelation percentage fee for ride 
              currency:
                type: string
                description: The default currency of the app defaul - USD
              warningCount:
                type: number
                description: The Warning count given to a user before account get automatically blocked
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/createFaq:
    post:
      tags:
        - Settings
      summary: New Faq
      description: Endpoint to create a new faq
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - question
              - answer
            properties:
              question:
                type: string
              answer:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/updateFaq:
    post:
      tags:
        - Settings
      summary: Update Faq
      description: Endpoint to update a faq
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - question
              - answer
              - faqId
            properties:
              faqId:
                type: string
              question:
                type: string
              answer:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/deleteFaq/{faqId}:
    post:
      tags:
        - Settings
      summary: Delete a Faq
      description: The endpoint to delete an Faq
      parameters:
        - name: faqId
          in: path
          required: true
          description: The faqId of the faq data
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /api/appSettings/updateAbout:
    post:
      tags:
        - Settings
      summary: Write about app
      description: Endpoint to to write about app
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - about
            properties:
              about:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/getAppSettings:
    get:
      tags:
        - Settings
      summary: Get app settings
      description: Endpoint to get app settings
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/getFaqs:
    get:
      tags:
        - Settings
      summary: Get Faqs
      description: Endpoint to get faq
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /api/appSettings/getAbout:
    get:
      tags:
        - Settings
      summary: Get about
      description: Endpoint to get about
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error
